import java.io.*;
import java.util.*;
import java.io.File.*;
import java.util.HashMap;
import java.util.Scanner;


import org.apache.poi.xssf.*;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.VerticalAlignment;


/*
 * Code Created by Michael Edwards for Professor Dominik Guess
 * 
 * The following code is designed to take in plain .txt input generated by xstore and convert that information
 * into an excel spreadsheet organized by a four alphanumeric name and three different game types (Coldstore,
 * Fire A/1, and Fire B/2). This code was created using the Eclipse IDE and as such, it was able to read
 * all .txt files placed within the working directory. This code is NOT designed to search through a system's
 * file directory.
 * 
 * This program makes use of Apache POI, an external JAR that enables developers to create a Microsoft Excel
 * spread sheet through Java. Documentation is provided for reference: https://poi.apache.org/apidocs/index.html
 * 
 * Please note that XSSF is for more current excel sheets (.xlsx) while HSSF is for legacy sheets (.xls)
 */




public class ExcelConverter {
	
	static File dir = new File("/Users/michaeledwards/eclipse-workspace/ExcelConverter/allfiles"); //Sets the filepath for one of the folders used to store .txt files. End program will include all three numbers.
	static List<String> fileList = new ArrayList<String>(); //Stores all working file names into a list. For use with fileReader.
	static List<String> fullStateList = new ArrayList<String>(); //Stores all possible combination of states
	
	static List<String> readStates = new ArrayList<String>(); //Stores states read through fileReader
	static XSSFWorkbook workbook = new XSSFWorkbook(); //Creates a new workbook (.xlsx file)
    static XSSFSheet firstSheet = workbook.createSheet("FIRST SHEET"); //Creates a new sheet for the spreadsheet
    static XSSFRow row1 = firstSheet.createRow(0); //"Creates" a row on the first sheet
    static XSSFRow rowN = null; //For use in subsequent rows that isn't the first row that lists the parameters
    static String [] state = new String [] { //First array that stores the states as outlined by the client.
    	"ATEX", "ATI", "C", "EMO+", "EMO-" ,
    	"EV+", "EV-", "G", "IP", "L",
    	"META", "O", "OE", "P", "QF",
    	"QS", "RT", "S/G", "SJ", "SUM+",
    	"SUM-", "SUM~"
    };
    
    static String [] state2 = new String [] { //Second array that stores the states as outlined by the client.
        	"ATEX", "ATI", "C", "EMO+", "EMO-" ,
        	"EV+", "EV-", "G", "IP", "L",
        	"META", "O", "OE", "P", "QF",
        	"QS", "RT", "S/G", "SJ", "SUM+",
        	"SUM-", "SUM~"
        };
    
    static HashMap<String, Integer>  dataset = new HashMap<String, Integer>(); //Places all states on a hash map along with an associated "value" (value being the amount of times it shows up)
    static HashMap<String, Integer> stateMap = new HashMap<String, Integer>(); //Places all states on a hash map along with an associated "value" (value being the cell number in which it's column is located)
	
	public ExcelConverter() 
	{
		
	}//End Empty constructor

//===================================================================
	public void fileReader(String fileName) throws FileNotFoundException
	{
		//Method takes in a specified fileName (through fileList) and reads through that specific file
		//line by line. All whitespace will be removed.
		try 
		{
				File file = new File(fileName);
				FileReader input = new FileReader(file);
				BufferedReader br = new BufferedReader(input);
				String Strline;
				
				while ( (Strline = br.readLine()) != null)  
				{
					String[] array = Strline.split(";");
					readStates.add(array[1].replaceAll("\\s+", "") + ";" + array[2].replaceAll("\\s+", ""));
					//Line 80 splits the read line (Strline) and breaks it into arrays with all whitespace taken out
					
				}
				
				input.close();	
		
		}
		
		catch(IOException e)
		{
			e.printStackTrace();
			throw new FileNotFoundException("File not found!");
			
		}
 
	}//end fileReader
	
	
//===================================================================
	public void writeParams() //Method writes the initial parameters within the excel sheet
	{
		int cellNum = 0; //Keeps track of cell position within row
		
		for(int i = 0; i < 3; i++)
		{
			
			if(i == 0) //Sets the very first cell in the sheet as the parameter "Name" Column
			{
				Cell cell = row1.createCell(cellNum++);
				cell.setCellValue("NAME");
				stateMap.put("NAME", (int) row1.getFirstCellNum()); //Sets the NAME parameter with the value
																	//of 0 on the stateMap hash map
				
			}
			
			else if(i == 1) //Sets the second cell in the sheet as the parameter "Game Type"
			{
				Cell cell = row1.createCell(cellNum++);
				cell.setCellValue("GAME TYPE");
				stateMap.put("GAME TYPE", 1);
				//Sets the GAME TYPE parameter with the value of 1 on the stateMap hash map
			}
			
			else //For everything else, we'll be using the Cartesian product in order to account for all the different
				//combinations of states.
				
			{
				for(int j = 0; j < state.length; j++)
				{
					for(int k = 0; k < state2.length; k++)
					{
						Cell cell = row1.createCell(cellNum++);
						cell.setCellValue(state[j] + ";" + state[k]);
						fullStateList.add(state[j] + ";" + state[k]);
						stateMap.put(state[j] + ";" + state[k], cellNum);
						//This creates the stateMap hash with all possible states, along with an associated cellNum
						//in order to organize data by column.
						
					}//end for k
				}//end for j
				
				
				
			}//end else
			
		}//end for loop
	}//end write params
	
//===================================================================
	
	public void dirReader()  //reads file in a directory and stores listed items in a List
	{
		fileList = Arrays.asList(dir.list(
				new FilenameFilter() {
					@Override public boolean accept(File dir, String name) {
						return name.endsWith(".txt");
					}
				}));
		
	}//end dirReader
//===================================================================
	public int compareAgainstHash()
	
	//This method takes in everything placed into readStates (through fileReader) and compares it to
	//the dataset hash map. If there is a match, then it would increment the value by one, along with
	//returning the value when writing to the excel sheet.
	
	{
		Integer tmp = 0;
		
			for(int i = 0; i < readStates.size(); i++)
			{
				if(dataset.containsKey(readStates.get(i)))
				{
					dataset.put(readStates.get(i), tmp++);
				}
				
			}
		
		readStates.clear(); //Clears out readStates for the next file to be read in.
			
		return tmp; //returns value for writing to the excel sheet
	}//end compareAgainstHash
	
//===================================================================
	public List<String> getName(List<String> fileList)
	{
		List<String> nameList = new ArrayList<String>(); //create an array list named "nameList" Will use in order to store just the name from the file name.
	
		
		for(int i = 0; i < fileList.size(); i++) //Begin for loop in order to traverse the inputed fileList
		{
			nameList.add(fileList.get(i).substring(0, 4)); //Adds the first four characters within the string from fileList. These four characters appear to be the "name" consistent across all .txt files
		}//End for loop
		
		return nameList; //Returns nameList
		
	}//end getName
//===================================================================
	public void writeNamesAndGame(List<String> nameList, List<String>gameList) throws FileNotFoundException
	{
		int rownum = 1; //Keeps track of the row number
		
		for(int i = 0; i < nameList.size(); i++)
		{
			int cellPOS = 0;
			
			rowN = firstSheet.createRow(rownum); //Creates a row based off of the rownum variable
			Cell cell0 = rowN.createCell(0); //Creates a cell that will always be at position 0 on any row
			cell0.setCellValue(nameList.get(i)); //Inserts a name from nameList at position i
			
			Cell cell1 = rowN.createCell(1); //Creates a cell that will always be at position 0 on any row
			cell1.setCellValue(gameList.get(i)); //Inserts a game type from nameList at position i
			
			fileReader(fileList.get(i));
			
			
			System.out.println(i);						//System.out.println info for t/s purposes only
			System.out.println(readStates.size());
			System.out.println(fileList.get(i));
			
			
			for(int j = 0; j < readStates.size() - 1; j++)
			{
				if(stateMap.get(readStates.get(j)) == null)
					break;
				else if(stateMap.get(readStates.get(j)) != null)
				{
				
				cellPOS = stateMap.get(readStates.get(j));
				
				Cell cellN = rowN.createCell(cellPOS);
				cellN.setCellValue(compareAgainstHash());
				}
			}
			
			readStates.clear();
			rownum++;
		}//end for
		
	}//end writeNamesAndGame
//===================================================================
	public List<String> getGameType(List<String> fileList)
	{
		List<String> gameList = new ArrayList<String>(); //creates a list that will store game types
		
		
		for(int i = 0; i < fileList.size(); i++) //loops through the entire fileList
		{
			String[] array = fileList.get(i).split("\\."); //Splits the string by "." and places them into an array. This will continuously initialize as it loops through
			gameList.add(array[2]); //Adds whatever is in array[2]. [2] is where the game type would be stored after splitting the String
		}
		
		return gameList; 
	}
	
//===================================================================
	public void populateHash() //Creates and populates a Hash table that associates every state with a value initialized at 0
	{
		for(int i = 0; i < fullStateList.size(); i++)
		{
			dataset.put(fullStateList.get(i), 0);
		}
	} 
	
//===================================================================

//===================================================================

	public static void main(String[] args) throws IOException {
		
		
		
		
		ExcelConverter in = new ExcelConverter();
		in.writeParams(); //write out parameters in excel sheet
		in.dirReader(); //reads directory and pulls out names and game type
		in.populateHash(); //populates hash with all combinations of states
		
		
		in.writeNamesAndGame(in.getName(fileList), in.getGameType(fileList));
		

        // To write out the workbook into a file we need to create an output
        // stream where the workbook content will be written to.
        try (FileOutputStream fos = new FileOutputStream(new File("CreateExcelDemo.xlsx"))) {
            workbook.write(fos);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


